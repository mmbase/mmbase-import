<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
"http://www.oasis-open.org/docbook/xml/4.0/docbookx.dtd">
<article id="backenddevelopers-components-index" class="specification">
  <articleinfo>
    <title>The MMBase Component Framework</title>

    <date>2009-04-02</date>

    <edition>$Id: components.xml,v 1.18 2008/08/08 13:40:56 michiel Exp
    $</edition>

    <authorgroup>
      <author>
        <firstname>Nico</firstname>

        <surname>Klasens</surname>
      </author>

      <author>
        <firstname>Henk</firstname>

        <surname>Hangyi</surname>
      </author>

      <author>
        <firstname>Andr√©</firstname>

        <surname>van Toly</surname>
      </author>
    </authorgroup>

    <revhistory>
      <revision>
        <revnumber>[0.4]</revnumber>

        <date>[2009-04-02]</date>

        <authorinitials>[AvT]</authorinitials>

        <revremark>[Spellchecking, updates to reflect current situation.]</revremark>
      </revision>
      <revision>
        <revnumber>[0.3]</revnumber>

        <date>[2008-04-25]</date>

        <authorinitials>[AvT]</authorinitials>

        <revremark>[Spellchecking, updates a bit to reflect beta
        release]</revremark>
      </revision>

      <revision>
        <revnumber>[0.2]</revnumber>

        <date>[2007-02-09 ]</date>

        <authorinitials>[HH]</authorinitials>

        <revremark>[Updated the document and moved the TODOs to Jira
        issues]</revremark>
      </revision>

      <revision>
        <revnumber>[0.1]</revnumber>

        <date>[2007-02-09]</date>

        <authorinitials>[HH]</authorinitials>

        <revremark>[Created]</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>This document describes the MMBase Component Framework.</para>
    </abstract>

    <legalnotice>
      <para>This software is OSI Certified Open Source Software. OSI Certified
      is a certification mark of the Open Source Initiative.</para>

      <para>The license (Mozilla version 1.0) can be read at the MMBase site.
      See <ulink
      url="http://www.mmbase.org/license">http://www.mmbase.org/license</ulink></para>
    </legalnotice>

    <productnumber>Component Framework from MMBase 1.9.</productnumber>
  </articleinfo>

  <section id="introduction">
    <title>Introduction</title>

    <para>The MMBase Component Framework adds component based development to
    MMBase. Components are applications or pieces of functionality that can be
    plugged into a typical MMBase installation. Currently the most examples of
    components can be found in the MMBase admin pages. These pages are
    completely rewritten as components and blocks.</para>

    <note>
      <para>Section 5.2 and further need revision.</para>
    </note>

    <para>To start appreciating component based development, lets turn to an
    example of integrating a poll component into your website. In the MMBase
    releases prior to 1.9 you had to include the poll.jsp into your jsp. The
    most difficult part was that you had to change the url generated by the
    poll such that the answer provided by the user was posted to the right
    page. Moreover, the url also had to contain all other necessary
    information needed for other functionality on that same page. Besides that
    you had to change the layout of poll.jsp so that the layout fits the
    layout of your website. By using the component framework the poll
    component can be integrated without the need to make a change to the
    component itself. The information to post the answer of the user to the
    right page is taken care of by the component framework and the layout of
    the poll follows the layout of the website automatically by means of the
    default css classes.</para>

    <para>Standardization of the way components interact with one another is
    another advantage of component based development. For instance you might
    want the votes on the poll to be registered in the users profile of the
    community component. In MMBase releases prior to 1.9 you had to "hardcode"
    the presence of the community component in your website. Within the
    component framework the poll component can simply ask whether the
    community component is present.<!-- More general in the component framework,
    components are aware of each-other presence and can respond to each others
    events. (TODO: is this already implemented ??) --></para>

    <para>If only a poll has to be integrated, the overhead of using component
    based development is much larger than the gain from reusing the component
    without any change. However most components, for instance in Didactor,
    consists of 50+ templates. Imagine what it if you could reuse such a
    component without the need to review and change all of these
    templates.</para>

    <para>Components can be accessed from jsp-pages directly or be used in a
    portlet engine/portal service. For use in jsp-pages MMBase offers tags in
    the MMBase tag library which put the components into action and render
    their content into the pages of a website. When using a portlet engine and
    portal service, like the CMS Container, this engine takes care of
    analyzing the client request, make the selected portlets execute, render
    their content and return the resulting page to the client.</para>
  </section>

  <section id="hello_world">
    <title>"Hello World!" (or rather "Welcome")</title>

    <para>Lets start with a simple example. The following configuration file
    snippet is from the component 'core' and defines one block named "welcome".
    This block has one renderer that is used in the html &lt;body&gt;
    tag.</para>

    <note>
      <para>This example can be found in '/config/components/core.xml'.</para>
    </note>

    <programlisting>&lt;block name="welcome"
  classification="mmbase.about:10"
  mimetype="text/html"&gt;
  &lt;title xml:lang="en"&gt;Welcome&lt;/title&gt;
  &lt;description xml:lang="en"&gt;Shows welcome page for MMBase admin pages&lt;/description&gt;
  &lt;body jsp="about.jspx" /&gt;
&lt;/block&gt;</programlisting>

    <para>Its jsp, the block, which can found in
    '/mmbase/admin/components/core' looks as follows (its a bit simplified to
    make it easier to read):</para>

    <programlisting>&lt;mm:cloud
    xmlns:jsp="http://java.sun.com/JSP/Page"
    xmlns:mm="http://www.mmbase.org/mmbase-taglib-2.0"&gt;
  &lt;jsp:output omit-xml-declaration="true" /&gt;
  &lt;div class="mm_c c_core b_welcome"&gt;
    &lt;h2&gt;Welcome to MMBase&lt;/h2&gt;
    &lt;h3&gt;You are running &lt;mm:cloudinfo type="mmbaseversion" /&gt;&lt;/h3&gt;
    &lt;p&gt;With some more text here...&lt;/p&gt;
  &lt;/div&gt;
&lt;/mm:cloud&gt;</programlisting>

    <para>To render this block, a jsp-page should contain the following
    tag:</para>

    <programlisting>&lt;mm:component name="core" block="welcome" /&gt;</programlisting>
  </section>

  <para>That's all.</para>

  <para>A more complicated one is for example one of the blocks of the MMBase
  cache with which you can interact. It enables you to disable, clear or show
  the several MMBase caches. In 'config/components/core.xml' you will find
  this block that enables you to configure the cache:</para>

  <programlisting>&lt;block name="cache"
       classification="mmbase.tools"
       mimetype="text/html"&gt;
  &lt;title xml:lang="en"&gt;Caches&lt;/title&gt;
  &lt;description xml:lang="en"&gt;This tools hows the performance of the various MMBase
  caches. You can also (temporary) turn on/off the cache here. For a persistent
  change you should change caches.xml.&lt;/description&gt;
  &lt;head&gt;
    &lt;class name="org.mmbase.framework.StringRenderer"&gt;
      &lt;param name="string"&gt;&lt;![CDATA[&lt;link rel="stylesheet" href="{REQUEST.getContextPath}/mmbase/components/core/cache/style.css" type="text/css" /&gt;]]&gt;&lt;/param&gt;
    &lt;/class&gt;
  &lt;/head&gt;
  &lt;body jsp="cache/index.jspx"&gt;
    &lt;param name="active" type="String" /&gt;
    &lt;param name="cache"  type="String" /&gt;
    &lt;param name="clear"  type="String" /&gt;
    &lt;param name="rs_active" type="String" /&gt;
    &lt;param name="rs_show"   type="String" /&gt;
    &lt;param name="rs_name"   type="String" /&gt;
  &lt;/body&gt;
&lt;/block&gt;</programlisting>

  <para>This block contains an example of a css with some specific classes
  that are used in this block. The css is automatically included in the head
  of the html document. Besides it contains several parameters to interact
  with the block's jsp.</para>

  <section id="configuration">
    <title>Configuration of a component</title>

    <para>The MMBase Component Frameworks adds a new directory to MMBase's
    configuration. This directory is specified in the mmbaseroot.xml and by
    default is: '/WEB-INF/config/components'.</para>

    <note>
      <para>Notice that after installing MMBase you will not find any files
      here, because the default config files are stored inside the
      mmbase.jar.</para>
    </note>

    <para>The core of a component is a component xml which is named after
    itself, f.e. 'ecards.xml'. It specifies the component's blocks and the
    renderers within each block. The following is a complete example of a
    ecards component with three blocks: 'home' (the default block), 'select'
    and 'done'.</para>

    <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    name="ecards"
    defaultblock="home"
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component
                        https://www.mmbase.org/xmlns/component.xsd"&gt;
  &lt;description&gt;Ecards component&lt;/description&gt;
  &lt;block name="home" mimetype="text/html"&gt;
    &lt;process jsp="ecards_init.jsp" /&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards.jsp" /&gt;
  &lt;/block&gt;
  &lt;block name="select" mimetype="text/html"&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_selectecard.jsp" /&gt;
  &lt;/block&gt;
  &lt;block name="done" mimetype="text/html"&gt;
    &lt;process class="org.mmbase.ecards.Send" /&gt;
    &lt;head jsp="ecards_head.jsp" /&gt;
    &lt;body jsp="ecards_done.jsp" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

    <para>In the above example most renderers are jsp-includes. It is also
    possible to use Java classes as renderer, for example &lt;process
    class="org.mmbase.ecards.Send" /&gt;.</para>

    <para>The information available to the jsp files are the request
    parameters, session attributes and the ids and jspvars put into the scope
    by tags in which the &lt;mm:content /&gt; tag is contained (see also
    section 4.5 on parameters). For the java classes the information is
    available from HttpServletRequest request and HttpServletResponse
    response. Btw. by using request.getSession() the session in which the
    block is rendered can be accessed.</para>

    <para>The jsp files associated with a component should be installed in the
    directory '/mmbase/components/[name_of_component]'. For example you will
    find the files that are used by the 'core' components in the directory
    '/mmbase/components/core'.</para>
  </section>

  <section>
    <title>The &lt;mm:component /&gt; tag</title>

    <para>This section provides an overview over the parameters and
    functionality of the &lt;mm:content /&gt; tag.</para>

    <section>
      <title>Defaults</title>

      <para>In the "Hello World" example the following tag was used:</para>

      <programlisting>&lt;mm:component name="core" block="welcome" /&gt;</programlisting>

      <para>The default block to be used by &lt;mm:component /&gt; when the
      block attribute is omitted, can be specified by using the attribute
      'defaultblock' at the beginning of the component's configuration file.
      In the "Hello World" example it is 'defaultblock="welcome"'. If no
      defaultblock is specified the first block is considered to be the
      default block. The default renderer is body. By using the defaults the
      tag could be rewritten to:</para>

      <programlisting>&lt;mm:component name="core" /&gt;</programlisting>

      <para>When block is not specified in the &lt;mm:component /&gt;, the
      default block of a component will be returned.</para>
    </section>

    <section>
      <title>Render and default css classes</title>

      <para>The renderers that are supported in the present implementation are:
      head, body, and process.</para>

      <para>The process renderer of block is called implicitly, if the head or
      the body of that block is called. The process renderer of block will
      only be executed once per calling page. To give an example: if your page
      contains two polls, the processor of only one of these polls will be
      carried out after voting. (Which seems to be a defendable assumption in
      this epoch of single-moused computers) The process render does not
      produce any output.</para>

      <para>The renderer for body with mimetype="text/html" by convention
      should render a &lt;div /&gt; with class="mm_c c_&lt;component name&gt;
      b_&lt;block name&gt; ${requestScope.className}". The framework will
      assign a value to request attribute ${requestScope.componentClassName} .
      For example a framework could render the poll component within the div
      &lt;class="mm_c c_ecard b_home left"&gt;. The basic implementation of
      the MMBase framework does not implement ${requestScope.className},
      leaving the last part of the class definition empty.</para>

      <para>The framework also renders an unique id for the &lt;div /&gt;
      containing a component. To summarize each renderer should
      contain:</para>

      <programlisting>&lt;div
    class="mm_c c_core b_welcome ${requestScope['org.mmbase.componentClassName']}"
    id="${requestScope['org.mmbase.componentId']}"
&gt;</programlisting>

      <para>In future the class specification should be extended with classes
      for icons and content images, which would give graphical designers also
      global control over what happens with icons and content images in a
      page</para>

      <para>The following css selectors can be used for general style on
      produced content. As of 1.9.0, this is only a proposal, mainly copied
      from classes already used in the 'richtext' application. <ulink
      url="http://www.mmbase.org/jira/browse/MMB-1388">MMB-1388</ulink></para>

      <itemizedlist>
        <listitem>
          <para>img.icon: an image that should be interpreted as some kind of
          icon.</para>
        </listitem>

        <listitem>
          <para>img.image-inline: an image that should be rendered inline in
          the text</para>
        </listitem>

        <listitem>
          <para>img.image-left: this image can be floated, preferrably to the
          left</para>
        </listitem>

        <listitem>
          <para>img.image-right: this image can be floated, preferrable to the
          right</para>
        </listitem>

        <listitem>
          <para>img.image-center: this image would like to take up the full
          width</para>
        </listitem>

        <listitem>
          <para>div.float.right: a floating div, preferrably to the
          right</para>
        </listitem>

        <listitem>
          <para>div.float.left: a floating div, preferrable to the left</para>
        </listitem>

        <listitem>
          <para>div.note: a div containing a (foot/side)note about the running
          text.</para>
        </listitem>

        <listitem>
          <para>div.intermezzo: a div containing a intermezoo on the running
          text. An elaborated note.</para>
        </listitem>

        <listitem>
          <para>div.quote: a div containing a quote, illustrating the running
          text</para>
        </listitem>

        <listitem>
          <para>div.caption: a div that captures other content, like an
          image</para>
        </listitem>

        <listitem>
          <para>table.grid: a table which visible borders</para>
        </listitem>

        <listitem>
          <para>table.plain: an invisible table</para>
        </listitem>

        <listitem>
          <para>table.listing: a table that lists a number of similar
          things</para>
        </listitem>

        <listitem>
          <para>table.data: a table that contains (numerical) data</para>
        </listitem>

        <listitem>
          <para>table.wide: a table wanting to take up the full width</para>
        </listitem>

        <listitem>
          <para>td.align-right:</para>
        </listitem>

        <listitem>
          <para>td.align-left:</para>
        </listitem>

        <listitem>
          <para>td.align-center:</para>
        </listitem>

        <listitem>
          <para>tr.odd:</para>
        </listitem>

        <listitem>
          <para>tr.even:</para>
        </listitem>
      </itemizedlist>

      <para>On default when no renderer is specified the render 'body' will be
      returned. If there is no body renderer defined in the component the
      first renderer specified in the component will be used as the default
      renderer. This could for instance be handy when you implement a
      component that only need to be rendered in the head of a page.</para>
    </section>

    <section>
      <title>Mimetype</title>

      <para>The mimetype can be used to indicate that the component is
      rendering special file types like images, attachments, etc. In the
      example above we could have used 'mimetype="application/xhtml+xml"'.
      Where Firefox interprets this filetype correctly and will check the
      validity of the page, the present versions of Internet Explorer will
      prompt the user to download this page. Because of this IE bug it is
      better to use 'text/html'.</para>

      <para>Of course the mime-type of a component does not matter for the
      browser. Because you will hardly never send the block unwrapped to a
      client. So, the mimetype of a block only serves as an indication of the
      type of content it produces. 'application/xhtml+xml' could indicate that
      besides HTML it is also valid XML, and is therefore fit to be used in a
      page which is 'application/xhtml+xml' itself. Probably the XML can be
      used just as well in a 'text/html' rendering page. (see also
      MMB-1389)</para>
    </section>

    <section>
      <title>Absolute and relative position of jsp-includes</title>

      <para>In the Hello World example at the beginning of this chapter the
      jsp include "/mmbase/admin/components.jspx" is positioned absolute to
      the root of the web application. By setting the request parameter
      doMakeRelative to true, the jsp include can be positioned relative to
      the jsp page that contains the &lt;mm:component /&gt; tag. TODO is this
      functionality necessary for the component framework, see also
      MMB-1390.</para>
    </section>

    <section>
      <title>Implicit and explicit parameters &lt;mm:param /&gt;</title>

      <para>When the &lt;mm:component /&gt; tag is contained in another tag
      all the information from the containing tag is available to the
      &lt;mm:component /&gt; tag. For instance in the situation &lt;mm:cloud
      jspvar="cloud"&gt;&lt;mm:component name="core" /&gt;&lt;/mm:cloud&gt;
      the components.jspx could contain &lt;%= cloud.getUser().getIdentifier()
      %&gt;.</para>

      <para>When it is necessary to include extra parameters this can be done
      by using the &lt;mm:param /&gt; tag.</para>

      <para>Some examples:</para>

      <programlisting>&lt;!-- this piece uses the poll component to show two polls --&gt;
&lt;mm:node number="first_poll"&gt;&lt;mm:component name="poll"&gt;&lt;mm:node&gt;
&lt;mm:node number="second_poll"&gt;&lt;mm:component name="poll"&gt;&lt;mm:node&gt;</programlisting>

      <para>Parameters need to be specified in configuration. The 'my_game'
      example should be configured in a block that could look like
      this:</para>

      <programlisting>&lt;block name="default" mimetype="text/html"&gt;
  &lt;description xml:lang="en"&gt;The first block of this game.&lt;/description&gt;
  &lt;body jsp="/mygame/first.jsp"&gt;
    &lt;param name="level" type="string" /&gt;
  &lt;/body&gt;
&lt;/block&gt;
</programlisting>
    </section>
  </section>

  <section>
    <title>Frameworks and changing the behavior of the &lt;mm:url /&gt; and
    &lt;mm:include /&gt; tags</title>

    <para>Next to basic reference implementation of the component framework
    included in the MMBase core other frameworks exist, for instance the CMS
    Container and Patmos. Each framework is providing the context in which
    components are rendered. This is done by changing the behavior of the
    &lt;mm:url /&gt; and the &lt;mm:include /&gt; tag. The next section shows
    how frameworks are implemented. The "Hello Again!" example gives an
    example of using a framework.</para>

    <section>
      <title>Framework</title>

      <para>A framework is an implementation of
      org.mmbase.framework.Framework. By implementing the method
      Framework.getUrl() the behavior of &lt;mm:url /&gt; and &lt;mm:include
      /&gt; can be changed. This can be used to change the layout and the
      includes used in the page, based on the parameters passed to that
      page.</para>

      <para>The framework that will be used for rendering the components in an
      MMBase instance is specified in 'config/modules/mmbaseroot.xml', by
      using the following parameter:</para>

      <programlisting>&lt;property name="framework"&gt; ... &lt;/property&gt;</programlisting>

      <para>If no framework is specified in 'mmbaseroot.xml' the
      org.mmbase.framework.BasicFramework will be used.</para>
    </section>

    <section>
      <title>Hello again! and goodbye to &lt;mm:treeinclude /&gt; and
      &lt;mm:treefile /&gt;</title>

      <para>The use of the MMBase Framework functionality is shown by the
      following "Hello again!" example. It's component is rather simple and
      includes just one block which is meant to be rendered in the head of a
      document:</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;component
    xmlns="http://www.mmbase.org/xmlns/component"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.mmbase.org/xmlns/component https://www.mmbase.org/xmlns/component.xsd"
    name="helloagain"&gt;
  &lt;description&gt;Hello again! An example component with just one block.&lt;/description&gt;
  &lt;block name="home" mimetype="text/html"&gt;
    &lt;head jsp="hello_head.jsp" /&gt;
  &lt;/block&gt;
&lt;/component&gt;</programlisting>

      <para>That block points to a jsp-include 'hello_head.jsp' with just a
      title and a css:</para>

      <programlisting>&lt;%@page language="java" contentType="text/html;charset=utf-8" session="false"%&gt;
&lt;%@taglib uri="http://www.mmbase.org/mmbase-taglib-1.0" prefix="mm"%&gt;
&lt;mm:content type="text/html" language="en"&gt;
&lt;mm:cloud&gt;
   &lt;title&gt;Hello world!&lt;/title&gt;
   &lt;mm:link page="hello.css"&gt;&lt;link rel="stylesheet" type="text/css" href="${_}" /&gt;&lt;/mm:link&gt;
&lt;/mm:cloud&gt;
&lt;/mm:content&gt;</programlisting>

      <para>A jsp-page that makes use of this component may look like:</para>

      <programlisting>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "DTD/xhtml1-strict.dtd"&gt;
&lt;%@page language="java" contentType="text/html;charset=utf-8" session="false"%&gt;
&lt;%@taglib uri="http://www.mmbase.org/mmbase-taglib-2.0" prefix="mm"%&gt;
&lt;mm:content type="text/html" language="en"&gt;
&lt;mm:cloud&gt;
&lt;head&gt;
   &lt;!-- parameters are case sensitive -&gt;
   &lt;mm:component name="helloagain" block="home" render="head" /&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1&gt;Hello again!&lt;/h1&gt;
&lt;/body&gt;
&lt;/mm:cloud&gt;
&lt;/mm:content&gt;</programlisting>

      <para>The call to &lt;mm:url page="hello.css" /&gt; is picked up by the
      getUrl() method of the framework which is specified for this MMBase
      instance.</para>

      <para>This method</para>

      <programlisting>getUrl(String page, String component, Cloud cloud, PageContext pageContext, List params)</programlisting>

      <para>could for instance call</para>

      <programlisting>UrlResolver.findUrl(component + "/" + page, cloud, pageContext, params)</programlisting>

      <para>In the findUrl() method the params can be used to select different
      css-es for different portals. The code which is used for this looks
      something like:</para>

      <programlisting>Node portalNode = cloud.getNode((String)params.get("portal"));
String finalpage = findUrl(page, portalNode, mapNode);
if (finalpage != null) {
   return File.separator + finalpage;
}</programlisting>

      <para>The example framework presented here thus provides the
      functionality to use one set of templates, but have subsites with
      different layouts and subsite-specific includes.</para>

      <note>
        <para>If you are familiar with &lt;mm:treeinclude /&gt; and
        &lt;mm:treefile /&gt; you will probably already have recognized that
        this framework replaces the functionality of both these tags.</para>
      </note>
    </section>

    <section>
      <title>Linking within components</title>

      <para>In the above examples we saw the use of &lt;mm:url /&gt; to
      include a stylesheet. The tags &lt;mm:url /&gt; and &lt;mm:link /&gt;
      can also be used to link blocks with each other or to specify links
      within a block.</para>

      <programlisting>&lt;mm:link page="servers" referids="_@server"&gt;
  &lt;a href="${_}"&gt;&lt;mm:field name="name" /&gt;&lt;/a&gt;
&lt;/mm:link&gt;
</programlisting>

      <para>The 'page' attribute is used to specify the block to link
      to..</para>
    </section>
  </section>

  <section id="action_flow">
    <title>Action flow within the portlet engine / portal service</title>

    <para>To give an idea of how a portlet engine / portal service works this
    sections gives an overview of the flow of actions that take place when a
    client calls an url:</para>

    <orderedlist>
      <listitem>
        <para>Client calls url</para>
      </listitem>

      <listitem>
        <para>Tomcat (or other application server) routes url to web
        application of the portal</para>
      </listitem>

      <listitem>
        <para>A servlet inside the portal web application receives the
        url</para>
      </listitem>

      <listitem>
        <para>Portal servlet will analyze the request</para>

        <itemizedlist>
          <listitem>
            <para>global navigation path to a page</para>
          </listitem>

          <listitem>
            <para>local navigation for the portlet (indicates which portlet is
            active in this call)</para>
          </listitem>

          <listitem>
            <para>window state for each portlet</para>
          </listitem>

          <listitem>
            <para>portlet mode for each portlet</para>
          </listitem>

          <listitem>
            <para>render parameters for each portlet</para>
          </listitem>

          <listitem>
            <para>action parameters from query string</para>

            <para>Action parameters correspond to our "processor" of a
            block</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of action phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves portlet instance which user wants to
            interact with</para>
          </listitem>

          <listitem>
            <para>Portal servlet creates ActionRequest and ActionResponse
            objects</para>
          </listitem>

          <listitem>
            <para>Portal servlet dispatches ActionRequest to the servlet which
            hosts the portlet instance for the action phase and sends the
            action parameters</para>
          </listitem>

          <listitem>
            <para>Portlet instance processes the action parameters maybe with
            the help of its own presentation framework (struts, jsf, jsp,
            tapestry, wicket, whatever)</para>
          </listitem>

          <listitem>
            <para>Portlet instance can change things in the request, session,
            preferences, external system, database, etc.</para>
          </listitem>

          <listitem>
            <para>Portlet instance modifies ActionResponse to tell the Portal
            servlet what should happen next. Redirect to client or render
            phase.</para>
          </listitem>

          <listitem>
            <para>Portal Servlet receives ActionResponse and acts on it</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>Start of render phase</para>

        <itemizedlist>
          <listitem>
            <para>Portal servlet resolves page object from global
            navigation.</para>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves all portlet instances on the page.
            For each portlet instance</para>

            <itemizedlist>
              <listitem>
                <para>Portal servlet creates RenderRequest and RenderResponse
                objects</para>
              </listitem>

              <listitem>
                <para>Portal servlet dispatches RenderRequest to the servlet
                which hosts the portlet instance.</para>
              </listitem>

              <listitem>
                <para>Portlet instances reads portlet mode and window
                state.</para>
              </listitem>

              <listitem>
                <para>Portlet instances calls his own presentation framework
                (struts, jsf, jsp, tapestry, wicket, whatever).</para>
              </listitem>

              <listitem>
                <para>Portlet instances writes markup fragment to
                RenderResponse.</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>Portal servlet retrieves page template</para>
          </listitem>

          <listitem>
            <para>Portal servlet decorates portlet RenderResponse outputs with
            window and portlet mode buttons and inserts it in the page
            template.</para>
          </listitem>

          <listitem>
            <para>Final result is written to client response</para>
          </listitem>

          <listitem>
            <para>Portal servlet returns response to the client.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>In the above flow no separation is made between portal service and
    the portlet engine (for instance pluto). The portlet engine provides the
    runtime environment for the portlet instances. The portal service does all
    page related stuff.</para>
  </section>

  <section id="cmsc">
    <title>The CMS Container: portlets and components</title>

    <para>The CMS Container is one of the MMBase contributions. For
    documentation of the CMS Container see the reference list at the end of
    this document. This section addresses the relation between portlets and
    components.</para>

    <section>
      <title>Using components as portlets</title>

      <para>A wrapper class is developed in the CMS Container, which makes it
      possible to use any MMBase component in the CMS Container (done by the
      classes MMComponentPortlet and MMBaseFramework) This means that for the
      components the CMS Container will use the components.xml from the
      component instead of the project.xml that is used for the portlets in
      the CMS Container.</para>
    </section>

    <section>
      <title>Using portlets as components</title>

      <para>The other way around the situation is more difficult. When a
      portlet depends on the objectmodel of the CMS Container it is not
      possible to rewrite it to an MMBase component, that can be reused
      outside the CMS Container. Only portlets that do not depend explicitly
      on the objectmodel of the CMS Container can be rewritten into
      components. The present version of the CMS Container in the MMBase CVS
      does not contain examples of such portlets. But don't get worried:
      portlets like calender, playlist, etc. which are now being developed
      will be added as components later.</para>
    </section>
  </section>

  <section id="location_of_files">
    <title>Some notes on the location of files</title>

    <para>It is handy to use the same structure to store the files of a
    component within an application or contribution. When it comes to
    building, the exact location is of minor importance because the build
    process can reshuffle directories to get them into the right location in
    the build. Below follows an overview of how files are structured at the
    moment.</para>

    <section>
      <title>Applications and contributions</title>

      <para>In the 1.8 MMBase applications and contributions files are stored
      in the following directories:</para>

      <itemizedlist>
        <listitem>
          <para>MyApplication</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyApplication.xml</para>
                    </listitem>

                    <listitem>
                      <para>MyApplication</para>

                      <itemizedlist>
                        <listitem>
                          <para>builders</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>builders</para>
                </listitem>

                <listitem>
                  <para>functions</para>
                </listitem>

                <listitem>
                  <para>log</para>
                </listitem>

                <listitem>
                  <para>modules</para>
                </listitem>

                <listitem>
                  <para>security</para>
                </listitem>

                <listitem>
                  <para>thememanager</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>packaging: what to do this?</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>src</para>
            </listitem>

            <listitem>
              <para>META-INF</para>
            </listitem>

            <listitem>
              <para>WEB-INF</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>The CMS Container</title>

      <para>The CMS Container contains several portlets, which all can be
      viewed as separate applications. These portlets can be found in
      /contributions/CMSContainer/cmsc. For the CMS Container the Maven
      preferred way of storing files is used. The files of these portlets are
      stored in the following directories:</para>

      <itemizedlist>
        <listitem>
          <para>config</para>
        </listitem>

        <listitem>
          <para>resources: resource bundles and property files</para>
        </listitem>

        <listitem>
          <para>src</para>

          <itemizedlist>
            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>tld</para>
            </listitem>

            <listitem>
              <para>webapp</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>project.xml</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Didactor</title>

      <para>In Didactor, the e-learning platform that is based on MMBase, the
      components are structured as follows:</para>

      <itemizedlist>
        <listitem>
          <para>mycomponent</para>

          <itemizedlist>
            <listitem>
              <para>config</para>

              <itemizedlist>
                <listitem>
                  <para>applications</para>

                  <itemizedlist>
                    <listitem>
                      <para>MyComponent</para>

                      <itemizedlist>
                        <listitem>
                          <para>MyComponent.xml</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>components</para>

                  <itemizedlist>
                    <listitem>
                      <para>mycomponent.xml</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>translations</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>java</para>
            </listitem>

            <listitem>
              <para>lib</para>
            </listitem>

            <listitem>
              <para>templates</para>
            </listitem>

            <listitem>
              <para>webinf</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Component Framework (MMBase 1.9)</title>

      <note>
        <para>This sections needs an update. It does not describe the actual situation for components in the MMBase repository. We use a maven2 structure.</para>
      </note>
      <para>For the file structure of components the following principle will
      be used.</para>

      <itemizedlist>
        <listitem>
          <para>MyContribution</para>

          <itemizedlist>
            <listitem>
              <para>components</para>

              <itemizedlist>
                <listitem>
                  <para>mycomponent1</para>

                  <itemizedlist>
                    <listitem>
                      <para>config</para>

                      <itemizedlist>
                        <listitem>
                          <para>components/mycomponent.xml</para>
                        </listitem>

                        <listitem>
                          <para>model.xml</para>
                        </listitem>

                        <listitem>
                          <para>builders</para>
                        </listitem>

                        <listitem>
                          <para>data</para>
                        </listitem>

                        <listitem>
                          <para>functions</para>
                        </listitem>

                        <listitem>
                          <para>log</para>
                        </listitem>

                        <listitem>
                          <para>modules</para>
                        </listitem>

                        <listitem>
                          <para>security</para>
                        </listitem>
                      </itemizedlist>
                    </listitem>

                    <listitem>
                      <para>documentation</para>
                    </listitem>

                    <listitem>
                      <para>editwizards</para>
                    </listitem>

                    <listitem>
                      <para>templates</para>
                    </listitem>

                    <listitem>
                      <para>src</para>
                    </listitem>

                    <listitem>
                      <para>resources</para>
                    </listitem>

                    <listitem>
                      <para>tld / META-INF</para>
                    </listitem>

                    <listitem>
                      <para>WEB-INF</para>
                    </listitem>

                    <listitem>
                      <para>project.xml</para>
                    </listitem>

                    <listitem>
                      <para>readme.txt</para>
                    </listitem>
                  </itemizedlist>
                </listitem>

                <listitem>
                  <para>mycomponent2</para>
                </listitem>

                <listitem>
                  <para>mycomponent3</para>
                </listitem>
              </itemizedlist>
            </listitem>

            <listitem>
              <para>documentation</para>
            </listitem>

            <listitem>
              <para>build.xml</para>
            </listitem>

            <listitem>
              <para>readme.txt</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>

      <note>
        <para>In the new structure the applications directory is replaced by
        the model.xml file in the config directory of the component and a data
        directory containing the default data for the component, the "apps1"
        xml dump.</para>
      </note>

      <note>
        <para>The editwizards are stored in a separate directory. In this way
        the build process itself can move the editwizards to the directory
        where the target application expects them.</para>
      </note>

      <note>
        <para>The lib directory is not necessary because the needed jar files
        are specified in the project.xml and will be downloaded during the
        build.</para>
      </note>
    </section>
  </section>

  <section id="references">
    <title>References</title>

    <para>The following documents can be used for further reading.</para>

    <itemizedlist>
      <listitem>
        <para>MMBase Component Framework projectpage <ulink
        url="http://www.mmbase.org/mmcf">
        http://www.mmbase.org/mmcf</ulink></para>
      </listitem>

      <listitem>
        <para>Presentation on JSR168 by Nico Klasens <ulink
        url="http://www.mmbase.org/mmbase/attachments/50434/JSR168.zip">http://www.mmbase.org/mmbase/attachments/50434/JSR168.zip</ulink></para>
      </listitem>

      <listitem>
        <para>An MMBase Component Framework by Johannes Verelst <ulink
        url="http://www.mmbase.org/mmbase/attachments/50347/MMBase_framework_-_tech.doc">
        http://www.mmbase.org/mmbase/attachments/50347/MMBase_framework_-_tech.doc</ulink></para>
      </listitem>

      <listitem>
        <para>Design CMS Container by Nico Klasens <ulink
        url="http://cmsc.finalist.com/Design%20CMSC.pdf">http://cmsc.finalist.com/Design
        CMSC.pdf</ulink> or <ulink
        url="http://cvs.mmbase.org/viewcvs/*checkout*/speeltuin/applications/cmsc/Design%20CMSC.pdf">http://cvs.mmbase.org/viewcvs/*checkout*/speeltuin/applications/cmsc/Design
        CMSC.pdf</ulink></para>
      </listitem>

      <listitem>
        <para>What Is a Portlet <ulink
        url="http://www.onjava.com/lpt/a/6208">http://www.onjava.com/lpt/a/6208</ulink></para>
      </listitem>
    </itemizedlist>
  </section>
</article>
